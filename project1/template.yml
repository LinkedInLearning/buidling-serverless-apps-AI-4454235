AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Parameters:
  InputBucketName:
    Type: String
    Default: ''
  Email:
    Type: String
    Default: ''

Resources:
  InputBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Ref InputBucketName
      NotificationConfiguration:
        EventBridgeConfiguration:
          EventBridgeEnabled: true

  NotificationTopic:
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
        - Endpoint: !Ref Email
          Protocol: email

  MyStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      DefinitionUri: statemachine/statemachine.asl.yaml
      DefinitionSubstitutions:
        TranscriptionBucket: !Ref InputBucket
        NotificationTopic: !Ref NotificationTopic
      Policies:
        - S3ReadPolicy:
            BucketName: !Ref InputBucket
        - S3WritePolicy:
            BucketName: !Ref InputBucket
        - SNSPublishMessagePolicy:
            TopicName: !GetAtt NotificationTopic.TopicName
        - EventBridgePutEventsPolicy:
            EventBusName: default
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - transcribe:StartTranscriptionJob
                - transcribe:GetTranscriptionJob
              Resource: '*'
            - Effect: Allow
              Action:
                - translate:TranslateText
              Resource: '*'
            - Effect: Allow
              Action: 'bedrock:*'
              Resource: '*'
      Events:
        S3MediaTrigger:
          Type: EventBridgeRule
          Properties:
            EventBusName: default
            Pattern:
              source:
                - aws.s3
              detail-type:
                - Object Created
              detail:
                bucket:
                  name:
                    - !Ref InputBucket
                object:
                  key: [{ prefix: 'uploaded/' }]

  TestingRule:
    Type: 'AWS::Events::Rule'
    Properties:
      EventPattern:
        source:
          - 'StateMachinePutEvent'
      Targets:
        - Arn: !GetAtt TestingLogGroup.Arn
          Id: 'TestingRule'

  TestingLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: 'SummaryLogGroup'

  TestingLogGroupPolicy:
    Type: AWS::Logs::ResourcePolicy
    Properties:
      PolicyName: EventBridgeToCWLogsPolicy
      PolicyDocument: !Sub >
        {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Sid": "EventBridgetoCWLogsCreateLogStreamPolicy",
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "events.amazonaws.com"
                ]
              },
              "Action": [
                "logs:CreateLogStream"
              ],
              "Resource": [
                "${TestingLogGroup.Arn}"
              ]
            },
            {
              "Sid": "EventBridgetoCWLogsPutLogEventsPolicy",
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "events.amazonaws.com"
                ]
              },
              "Action": [
                "logs:PutLogEvents"
              ],
              "Resource": [
                "${TestingLogGroup.Arn}"
              ],
              "Condition": {
                "ArnEquals": {"AWS:SourceArn": "${TestingRule.Arn}"}
              }
            }
          ]
        }

Outputs:
  InputBucketName:
    Description: 'Input bucket name'
    Value: !Ref InputBucket
