Comment: A description of my state machine
StartAt: Transcribe Text
States:
  Transcribe Text:
    Type: Task
    Resource: arn:aws:states:::aws-sdk:transcribe:startTranscriptionJob
    Parameters:
      Media:
        MediaFileUri.$: States.Format('s3://{}/{}', $.detail.bucket.name, $.detail.object.key)
      TranscriptionJobName.$: $$.Execution.Name
      LanguageCode: en-US
      OutputBucketName: ${TranscriptionBucket}
      OutputKey.$: States.Format('transcribed/{}.txt', $.detail.object.key)
    Next: Wait For Transcribe

  Wait For Transcribe:
    Next: Check Transcription Job Status
    Seconds: 60
    Type: Wait

  Check Transcription Job Status:
    Type: Task
    Next: Transcription Job Status Successful
    Parameters:
      TranscriptionJobName.$: $$.Execution.Name
    Resource: 'arn:aws:states:::aws-sdk:transcribe:getTranscriptionJob'

  Transcription Job Status Successful:
    Type: Choice
    Choices:
      - Variable: $.TranscriptionJob.TranscriptionJobStatus
        StringEquals: COMPLETED
        Next: Get Transcribed File
      - Variable: $.TranscriptionJob.TranscriptionJobStatus
        StringEquals: FAILED
        Next: Failed
    Default: Wait For Transcribe

  Get Transcribed File:
    Type: Task
    Next: Clean output
    Parameters:
      Bucket: ${TranscriptionBucket}
      Key.$: States.Format('transcribed/{}', States.ArrayGetItem(States.StringSplit($.TranscriptionJob.Transcript.TranscriptFileUri, '/'),4))
    Resource: 'arn:aws:states:::aws-sdk:s3:getObject'
    ResultSelector:
      filecontent.$: States.StringToJson($.Body)
    ResultPath: $.transcription

  Clean output:
    Type: Pass
    Next: Translate Text
    Parameters:
      TranscriptedText.$: $.transcription.filecontent.results.transcripts[0].transcript
      FileName.$: States.ArrayGetItem(States.StringSplit($.TranscriptionJob.Transcript.TranscriptFileUri, '/'),4)

  Translate Text:
    Type: Task
    Next: Add basic prompt to the output
    Resource: 'arn:aws:states:::aws-sdk:translate:translateText'
    Parameters:
      SourceLanguageCode: en
      TargetLanguageCode: es
      Text.$: $.TranscriptedText
    InputPath: $
    ResultPath: $.transcriptedText

  Add basic prompt to the output:
    Type: Pass
    Next: Combine prompts
    ResultPath: $.prompt
    Result:
      basicPrompt: 'Given the transcript provided at the end of the prompt, return a summary of 160 characters of the transcript. Keep the original language of the transcript. If the transcript is provided in spanish, return the summary in spanish. Here is the transcript: '
    InputPath: $

  Combine prompts:
    Type: Pass
    Next: Create S3 result URI
    InputPath: $
    Parameters:
      prompt.$: "States.Format('{} {}', $.prompt.basicPrompt, $.transcriptedText.TranslatedText)"
    ResultPath: $.completedPrompt

  Create S3 result URI:
    Type: Pass
    Next: Bedrock InvokeModel
    InputPath: $
    Parameters:
      uri.$: "States.Format('https://s3.us-east-1.amazonaws.com/${TranscriptionBucket}/results/{}-result.json', $.FileName)"
    ResultPath: $.resultURI

  Bedrock InvokeModel:
    Type: Task
    Resource: arn:aws:states:::bedrock:invokeModel
    Parameters:
      ModelId: arn:aws:bedrock:us-west-2::foundation-model/ai21.j2-ultra-v1
      Output:
        S3Uri.$: $.resultURI.uri
      Body:
        prompt.$: $.completedPrompt.prompt
        maxTokens: 1666
      ContentType: 'application/json'
      Accept: 'application/json'
    InputPath: $
    ResultPath: $.result
    Next: 'Succeed'

  Failed:
    Cause: Transcription Job failed
    Error: FAILED
    Type: Fail

  Succeed:
    Type: Succeed
